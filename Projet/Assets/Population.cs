//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
namespace AssemblyCSharp
{
	public class Population
	{
		public const double crossover = 0.75;
		public const double mutation = 0.25;
		public UnityEngine.GameObject[] indiv;
		public Tower[] individuSelec;
		public Tower[] futPop ;
		public bool done = false;

		private int nbtour;


		int fitnessmax=0;
				public Population (int _nbtour)
				{
			indiv = new GameObject[_nbtour];
			individuSelec = new Tower[(int)Math.Round((double)(_nbtour/2))];
			futPop = new Tower[_nbtour];
			nbtour = _nbtour;
						for (int i =0; i<nbtour; i++) {
								
								GameObject tower=MonoBehaviour.Instantiate(Resources.Load("Prefab/Tower") as GameObject);
				tower.name="Tower"+i;
								tower.transform.GetChild(0).gameObject.AddComponent<Tower>();
								if(i!=0){
					tower.transform.GetChild(0).tag="Untagged";
					tower.transform.GetChild(0).GetComponent<MeshRenderer>().enabled=false;
					tower.transform.GetChild(0).GetComponent<MeshCollider>().enabled=false;
					tower.transform.GetChild(0).GetComponent<Tower>().enabled=false;
				}
				indiv[i]=tower;
						}

				}

			

			public void reproduction(){
			List<int> index = new List<int> ();
			for (int i=0; i<(int)Math.Round((double)(nbtour/2)); i++) {
				index.Add(i);
			}
			Shuffle (index);
			Tower parent1;
			Tower parent2;
			UnityEngine.Random.seed = 213494651;
			for (int i=0; i<nbtour-1; i++) {
				if(index.Count<=1){
					int randint=UnityEngine.Random.Range(0,(int)Math.Round((double)(nbtour/2)));
					parent1=individuSelec[randint];
					int randint2= UnityEngine.Random.Range(0,(int)Math.Round((double)(nbtour/2)));
					while(randint==randint2){
						randint2= UnityEngine.Random.Range(0,(int)Math.Round((double)(nbtour/2)));
						if((int)Math.Round((double)(nbtour/2))==2){
							if(randint==0){
								randint2=1;
							}else{
								randint2=0;
							}
						}
					}
					parent2=individuSelec[randint2];
				}else{
					int randint=UnityEngine.Random.Range(0,index.Count);
					parent1=individuSelec[index[randint]];
					int randint2= UnityEngine.Random.Range(0,index.Count);
					while(randint==randint2){
						randint2= UnityEngine.Random.Range(0,index.Count);
						if(index.Count==2){
							if(randint==0){
								randint2=1;
							}else{
								randint2=0;
							}
						}
					}
					parent2=individuSelec[index[randint2]];

					index.Remove(randint);


				}
								float random = UnityEngine.Random.Range (0f, 1f);
								if (random < 0.75) {
					futPop[i]= Tower.ConstructTower2(parent1,parent2);
								}else{
					futPop[i]=Tower.ConstructTower1(parent1);
				}

						}
		}
			public void selection(){
			double fitnessTotale = 0;
			double fit = 0;
			Tower[] individu= new Tower[nbtour];
			for (int i=0; i<nbtour; i++) {
				individu[i]=indiv[i].transform.GetChild(0).GetComponent<Tower>();			
			}
			for (int i=0; i<nbtour; i++) {
				fitnessTotale+=individu[i].fitness;
				if(individu[i].fitness>fit){
					fit=individu[i].fitness;
					fitnessmax=i;
				}
			}
				for (int h=0; h<(int)Math.Round((double)(nbtour/2)); h++) {
								bool continu = true;
								while (continu) {
					continu=false;
										double rand = UnityEngine.Random.Range (0f, (float)fitnessTotale);
										if (rand < individu [0].fitness) {
												if (!Array.Exists (individuSelec, element => element == individu [0])) {
														individuSelec [h] = individu [0];
												} else {
														rand = UnityEngine.Random.Range ((float)individu [0].fitness+1, (float)fitnessTotale);

												}
										}
										double test = individu [0].fitness;
										double test_moins = individu [0].fitness; 
										for (int k=0; k<nbtour-1; k++) {
												test += individu [k + 1].fitness;
												if (rand >= test_moins && rand < test) {
														if (!Array.Exists (individuSelec, element => element == individu [k + 1])) {

																individuSelec [h] = individu [k + 1];
														}
							else{
								continu=true;
							}
												}
												test_moins += individu [k + 1].fitness;
										}
								}
						}
			reproduction ();
			survie (ref individu);
				}

		public void survie(ref Tower[] individu)
		{
			for (int i=0; i<nbtour; i++) {
				UnityEngine.Object.Destroy(GameObject.Find("Tower"+i));	

			}
			individu [nbtour-1] = individu [fitnessmax];

			for (int i=0; i<nbtour-1; i++)
			{
				individu[i]=futPop[i];
			}
			for (int i=0; i<nbtour; i++) {
				GameObject tower=MonoBehaviour.Instantiate(Resources.Load("Prefab/Tower") as GameObject);
				tower.name="Tower"+i;
				tower.transform.GetChild(0).tag="Untagged";
				tower.transform.GetChild(0).GetComponent<MeshRenderer>().enabled=false;
				tower.transform.GetChild(0).GetComponent<MeshCollider>().enabled=false;
				tower.transform.GetChild(0).gameObject.AddComponent(individu[i].GetType());	
				tower.transform.GetChild(0).GetComponent<Tower>().enabled=false;
				tower.transform.GetChild(0).GetComponent<Tower>().pv=individu[i].pv;
				tower.transform.GetChild(0).GetComponent<Tower>().position=individu[i].position;
				tower.transform.GetChild(0).GetComponent<Tower>().fitness=individu[i].fitness;
				tower.transform.GetChild(0).GetComponent<Tower>().weapons=individu[i].weapons;

				indiv[i]=tower;
				foreach(GameObject tow in this.indiv){
					tow.transform.GetChild(0).GetComponent<Tower>().pv=100;
					tow.transform.GetChild(0).GetComponent<Tower>().fitness=0;
				}
			}
		
			done = true;
		}
		public void genereTower(int i){
			foreach (GameObject po in Niveau.pons)
			{
				UnityEngine.Object.Destroy (po);
			}
			Tower tow = this.indiv [i].transform.GetChild (0).GetComponent<Tower> ();
			this.indiv[i].transform.GetChild(0).tag = "Tower";
			this.indiv[i].transform.GetChild(0).GetComponent<MeshRenderer> ().enabled = true;
			this.indiv[i].transform.GetChild(0).gameObject.GetComponent<MeshCollider> ().enabled = true;
			tow.enabled = true;
		
			Niveau.generate = true;
			tow.generation();
			GameObject.Find("GameController").GetComponent<Timer>().time = 0;
			IAPon.Initialize();
		}
		public void Shuffle<T>(IList<T> list)  
		{  
			System.Random rng = new System.Random();  
			int n = list.Count;  
			while (n > 1) {  
				n--;  
				int k = rng.Next(n + 1);  
				T value = list[k];  
				list[k] = list[n];  
				list[n] = value;  
			}
		}
		}

}

